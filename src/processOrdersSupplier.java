
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author briao
 */
public class processOrdersSupplier extends javax.swing.JFrame {

    /** Creates new form viewOrdersCUSTO */
    public processOrdersSupplier() {
        initComponents();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButtonBACKTODASH = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTableVIEWORDERS = new javax.swing.JTable();
        jButtonProcess = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableVIEWORDERS1 = new javax.swing.JTable();
        jButtonFinalize = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jButtonBACKTODASH.setText("Back");
        jButtonBACKTODASH.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonBACKTODASHActionPerformed(evt);
            }
        });

        jTableVIEWORDERS.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Num", "Auth. #", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVIEWORDERS.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVIEWORDERSMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTableVIEWORDERS);

        jButtonProcess.setText("Process");
        jButtonProcess.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcessActionPerformed(evt);
            }
        });

        jTableVIEWORDERS1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Order Num", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableVIEWORDERS1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableVIEWORDERS1MouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(jTableVIEWORDERS1);

        jButtonFinalize.setText("Finalize");
        jButtonFinalize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonFinalizeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 223, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(jButtonBACKTODASH)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(37, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonProcess, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonFinalize, javax.swing.GroupLayout.PREFERRED_SIZE, 85, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(22, 22, 22))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonBACKTODASH)
                    .addComponent(jButtonProcess)
                    .addComponent(jButtonFinalize))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 302, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(20, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonBACKTODASHActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonBACKTODASHActionPerformed
        //do not press rthe x button on window, it will close everything. back button is for navigation purposes
        setVisible(false);
    }//GEN-LAST:event_jButtonBACKTODASHActionPerformed

    private void jTableVIEWORDERSMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVIEWORDERSMouseClicked
            DefaultTableModel model = (DefaultTableModel)jTableVIEWORDERS.getModel();
            DefaultListModel jlist = new DefaultListModel();
            String filePath = "OrderList.txt";
            File file = new File(filePath);
            try{
                FileReader fr = new FileReader(file);
                BufferedReader br = new BufferedReader(fr);
                
                int selectedRow = jTableVIEWORDERS.getSelectedRow();
                Object[] lines = br.lines().toArray();      //creates an Object Array of row strings
                for(int i = 0; i < lines.length; i++){          //begins at one because first line is column names
                String[] row = lines[i].toString().split(",");
                if (jTableVIEWORDERS.getValueAt(selectedRow, 1).equals(row[2])){    //if authNum of jTable matches auth list in file
                    String[] itemsDelim = row[1].split("-");
                }
               // System.out.println(model.getValueAt(selectedRow, 0));
               // System.out.println(row[1]);   //reads items list from orderlist
            //jTextAreaORDERDETAILS.setText();
                }
            }catch(FileNotFoundException ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }

    }//GEN-LAST:event_jTableVIEWORDERSMouseClicked

    private void jButtonProcessActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcessActionPerformed
    //this method is connected to the 'Add to Cart' button. It adds selected items 
         //to cart upon pressing the button. 
         //PreCondition : must select an existing row in catalog table
         //Displays it in cart table
         //reference vid :
         //  https://www.youtube.com/watch?v=Zt4g6HiFNxo&list=PLFDH5bKmoNqxtOTzA4tjo-Exck6T2v7cG&index=19

         DefaultTableModel model1 = (DefaultTableModel)jTableVIEWORDERS.getModel();
         int indexs[] = jTableVIEWORDERS.getSelectedRows();
         DefaultTableModel model2 = (DefaultTableModel)jTableVIEWORDERS1.getModel();
        
         String filePath = "ProcessedOrdersList.txt";
            File file = new File(filePath);

            /////selects everything in table (cart) and writes it to file, sets staus to "unordered" pre-comparing cc number  i.e. authentication from bank file
            jTableVIEWORDERS.selectAll(); //selects all rows

            Object[] row = new Object[3];       //3 because my data file has 3 columns of data for every row read in
            for(int i = 0; i < indexs.length; i++){
                     row[0] = jTableVIEWORDERS.getValueAt(indexs[i], 0);        //int col param= OrderNumber Column
                     //row[1] = jTableVIEWORDERS.getValueAt(indexs[i], 1);        //int col param= Auth. # Column
                     row[1] = "Processed";
                     model2.addRow(row);
                     }
            try{
                FileWriter fw = new FileWriter(file,true); // add (file, true) instead if you want to append to the file
                BufferedWriter bw = new BufferedWriter(fw);
                
         for(int i = 0; i < indexs.length; i++){ 
                     System.out.println();
                     model1.removeRow(indexs[i]);
                     row[0] = jTableVIEWORDERS.getValueAt(indexs[i], 0);        //int col param= OrderNumber Column
                     //row[1] = jTableVIEWORDERS.getValueAt(indexs[i], 1);        //int col param= Auth. # Column
                     row[1] = "Processed";
                     bw.write(row[1] + " " + (String)row[0] + "-"); //String col param= Status Column
                     model2.addRow(row);
            }
                bw.close();
                fw.close();  
         }
            catch(IOException ex){
                Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
            } 
            
               // TODO add your handling code here:
    }//GEN-LAST:event_jButtonProcessActionPerformed

    private void jTableVIEWORDERS1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableVIEWORDERS1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTableVIEWORDERS1MouseClicked

    private void jButtonFinalizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonFinalizeActionPerformed
       //this method is connected to the 'Add to Cart' button. It adds selected items 
         //to cart upon pressing the button. 
         //PreCondition : must select an existing row in catalog table
         //Displays it in cart table
         //reference vid :
         //  https://www.youtube.com/watch?v=Zt4g6HiFNxo&list=PLFDH5bKmoNqxtOTzA4tjo-Exck6T2v7cG&index=19

         DefaultTableModel model1 = (DefaultTableModel)jTableVIEWORDERS1.getModel();
         int indexs[] = jTableVIEWORDERS1.getSelectedRows();
         DefaultTableModel model2 = (DefaultTableModel)jTableVIEWORDERS1.getModel();
        
         // saves table values to an order file
            String filePath = "FinalizeOrderList.txt";
            File file = new File(filePath);

            /////selects everything in table (cart) and writes it to file, sets staus to "unordered" pre-comparing cc number  i.e. authentication from bank file
            jTableVIEWORDERS1.selectAll(); //selects all rows

            Object[] row = new Object[3];       //3 because my data file has 3 columns of data for every row read in
            for(int i = 0; i < indexs.length; i++){
                     row[0] = jTableVIEWORDERS1.getValueAt(indexs[i], 0);        //int col param= OrderNumber Column
                     //row[1] = jTableVIEWORDERS1.getValueAt(indexs[i], 1);        //int col param= Auth. # Column
                     row[1] = "Finalized";
                     model2.addRow(row);
                     }
            try{
                FileWriter fw = new FileWriter(file,true); // add (file, true) instead if you want to append to the file
                BufferedWriter bw = new BufferedWriter(fw);
                
         for(int i = 0; i < indexs.length; i++){ 
                     System.out.println();
                     model1.removeRow(indexs[i]);
                     row[0] = jTableVIEWORDERS1.getValueAt(indexs[i], 0);        //int col param= OrderNumber Column
                     //row[1] = jTableVIEWORDERS1.getValueAt(indexs[i], 1);        //int col param= Auth. # Column
                     row[1] = "Finalized";
                     bw.write(row[1] + " " + (String)row[0] + "-"); //String col param= Status Column
                     model2.addRow(row);
            }
                bw.close();
                fw.close();  
         }
            catch(IOException ex){
                Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
            } 
    }//GEN-LAST:event_jButtonFinalizeActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(viewOrdersCUSTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(viewOrdersCUSTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(viewOrdersCUSTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(viewOrdersCUSTO.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new viewOrdersCUSTO().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonBACKTODASH;
    private javax.swing.JButton jButtonFinalize;
    private javax.swing.JButton jButtonProcess;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    javax.swing.JTable jTableVIEWORDERS;
    javax.swing.JTable jTableVIEWORDERS1;
    // End of variables declaration//GEN-END:variables

}

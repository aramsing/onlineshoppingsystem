
import java.io.*;
import java.util.Random;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author briao
 */
public class DashBoard extends javax.swing.JFrame {
    //this is customer dash board, supplier dashboard is in ___filename.java_____
    //set labels to default vals
        double subtotal = 0;
        double tax = 0;
        double total = 0;
        int IntAuthNum;
        String StringAuthNum;
        UserLanding test = new UserLanding();
    /**
     * Creates new form DashBoard
     */
    public DashBoard() {
        initComponents();
        //set default values for labels using local variables
        
        jLabelSUBTOTALAMOUNT.setText("$ " + String.valueOf(subtotal));
        jLabelTAXAMOUNT.setText("$ " + String.valueOf(tax));
        jLabelTOTALAMOUNT.setText("$ " + String.valueOf(total));
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCatalogView = new javax.swing.JTable();
        jButtonVIEWCATALOG = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTableCart = new javax.swing.JTable();
        jButtonADDTOCART = new javax.swing.JButton();
        jButtonREMOVEFROMCART = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabelSUBTOTALAMOUNT = new javax.swing.JLabel();
        jLabelTAXAMOUNT = new javax.swing.JLabel();
        jLabelTOTALAMOUNT = new javax.swing.JLabel();
        jButtonMakeOrder = new javax.swing.JButton();
        jButtonLOGOUT = new javax.swing.JButton();
        jRadioButtonSHIPOUT = new javax.swing.JRadioButton();
        jRadioButtonPICKUP = new javax.swing.JRadioButton();
        jLabel4 = new javax.swing.JLabel();
        jButtonVIEWORDERS = new javax.swing.JButton();
        jButtonVIEWINVOICES = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableCatalogView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Description", "Regular Price", "Premium Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCatalogView.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableCatalogView);

        jButtonVIEWCATALOG.setText("View Catalog");
        jButtonVIEWCATALOG.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVIEWCATALOGActionPerformed(evt);
            }
        });

        jTableCart.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(jTableCart);
        if (jTableCart.getColumnModel().getColumnCount() > 0) {
            jTableCart.getColumnModel().getColumn(2).setResizable(false);
        }

        jButtonADDTOCART.setText("Add to Cart");
        jButtonADDTOCART.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonADDTOCARTActionPerformed(evt);
            }
        });

        jButtonREMOVEFROMCART.setText("Remove from Cart");
        jButtonREMOVEFROMCART.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonREMOVEFROMCARTActionPerformed(evt);
            }
        });

        jLabel1.setText("Sub-Total");

        jLabel2.setText("Tax Amount");

        jLabel3.setText("Total");

        jLabelSUBTOTALAMOUNT.setText("null");

        jLabelTAXAMOUNT.setText("null");

        jLabelTOTALAMOUNT.setText("null");

        jButtonMakeOrder.setText("Finalize Cart");
        jButtonMakeOrder.setMaximumSize(new java.awt.Dimension(121, 23));
        jButtonMakeOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonMakeOrderActionPerformed(evt);
            }
        });

        jButtonLOGOUT.setText("Log Out");
        jButtonLOGOUT.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonLOGOUTActionPerformed(evt);
            }
        });

        jRadioButtonSHIPOUT.setText("ship to me (+$3)");

        jRadioButtonPICKUP.setText("pick up (free)");

        jLabel4.setText("Select Shipping Rate:");

        jButtonVIEWORDERS.setText("View Orders");
        jButtonVIEWORDERS.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVIEWORDERSActionPerformed(evt);
            }
        });

        jButtonVIEWINVOICES.setText("View Invoices");
        jButtonVIEWINVOICES.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonVIEWINVOICESActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonVIEWCATALOG)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonVIEWORDERS)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jButtonVIEWINVOICES))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonADDTOCART, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(250, 250, 250)
                        .addComponent(jButtonLOGOUT)
                        .addGap(0, 62, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButtonREMOVEFROMCART)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(13, 13, 13)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabel2)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel1))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabelSUBTOTALAMOUNT, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelTAXAMOUNT, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(jLabelTOTALAMOUNT, javax.swing.GroupLayout.Alignment.TRAILING))
                                .addGap(62, 62, 62)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButtonMakeOrder, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jRadioButtonSHIPOUT)
                                .addComponent(jLabel4)
                                .addComponent(jRadioButtonPICKUP))))
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addGap(59, 59, 59))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonVIEWCATALOG)
                    .addComponent(jButtonLOGOUT)
                    .addComponent(jButtonVIEWORDERS)
                    .addComponent(jButtonVIEWINVOICES))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButtonADDTOCART))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jButtonREMOVEFROMCART)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jRadioButtonSHIPOUT)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel1)
                                    .addComponent(jLabelSUBTOTALAMOUNT))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabelTAXAMOUNT)
                                    .addComponent(jLabel2))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(jLabel3)
                                    .addComponent(jLabelTOTALAMOUNT)))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jRadioButtonPICKUP)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jButtonMakeOrder, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButtonVIEWCATALOGActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVIEWCATALOGActionPerformed
        //this method is connected to the 'view catalog' button; this button is just 
        //place-holder right now until i decide whether i will change up the scene when
        //coming from the login <basically when i decide what the landing page will look like>
        //  It is also suitable on it's own as far as the use-case if concerned
        //reference vid(s) : 
        //  https://www.youtube.com/watch?v=LP7_DlIe670&list=PLFDH5bKmoNqxtOTzA4tjo-Exck6T2v7cG&index=25
        //  https://www.youtube.com/watch?v=L2xczUN9aI0&list=PLFDH5bKmoNqxtOTzA4tjo-Exck6T2v7cG&index=22
 
        String filePath = "catalogVals.txt";
        File file = new File(filePath);
        
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);

            DefaultTableModel model = (DefaultTableModel)jTableCatalogView.getModel();
            
            Object[] lines = br.lines().toArray();      //creates an Object Array of row strings
            for(int i = 1; i < lines.length; i++){          //begins at one because first line is column names
                String[] row = lines[i].toString().split(",");
  
                model.addRow(row);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonVIEWCATALOGActionPerformed

    
    private void jButtonADDTOCARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonADDTOCARTActionPerformed
        //this method is connected to the 'Add to Cart' button. It adds selected items 
        //to cart upon pressing the button. 
        //PreCondition : must select an existing row in catalog table
        //Displays it in cart table
        //reference vid :
        //  https://www.youtube.com/watch?v=Zt4g6HiFNxo&list=PLFDH5bKmoNqxtOTzA4tjo-Exck6T2v7cG&index=19

        DefaultTableModel model1 = (DefaultTableModel)jTableCatalogView.getModel(); //////////////////////////////////////
        int indexs[] = jTableCatalogView.getSelectedRows();
        DefaultTableModel model2 = (DefaultTableModel)jTableCart.getModel();
        
        Object[] row = new Object[5];       //5 because my data file has 5 columns of data for every row read in

        for(int i = 0; i < indexs.length; i++){ 
            System.out.println();
            //variable to compare quantity before adding
            int quantity = Integer.parseInt((String) jTableCatalogView.getValueAt(indexs[i], 4));
            String columnName = (String)jTableCatalogView.getValueAt(indexs[i],0);
            switch(quantity){
///////////////////////////////////////////////////////////////////////////////////////////////
                //////
                //////THE QUANTITY WOULD NEED TO BE MODIFIED FOR THE SUPPLIER AS WELL BUT WE 
                //////WILL COME BACK TO THIS IS WE DECIDE TO USE THE CATALOG AS THE FILE FOR SUPPLIER STOCK 
                //////
///////////////////////////////////////////////////////////////////////////////////////////////
                case 0: //in the case that the value of quantity column in this row is 0
                        //(meaning there is no more of this item), add button will not execute
                    model1.removeRow(indexs[i]);
                    JOptionPane.showMessageDialog(this,columnName + " is out of stock"); //////////////////////this won't be needed if the 
                                                                                                           ////viewcatalog doesn't show that item in first place
                    break;
                default :
                                                       //(int row,int col);    //row represents column, but the naming is confusing  
                    row[0] = jTableCatalogView.getValueAt(indexs[i], 0);        //int col param= ItemID Column
                 // row[1] = jTableCatalogView.getValueAt(indexs[i], 1);        //int col param= Description Column
                   // System.out.println("acctypevariable is: " + test.acctype);
                    if (test.acctype.equals("reg")){
                        row[1] = jTableCatalogView.getValueAt(indexs[i], 2);        //int col param= Regular Price Column
                    }
                    if (test.acctype.equals("prem")){
                        row[1] = jTableCatalogView.getValueAt(indexs[i], 3);        //int col param= Regular Price Column
                    }
                 // row[3] = jTableCatalogView.getValueAt(indexs[i], 3);        //int col param= Premium Price Column
                    row[2] = 1;//jTableCatalogView.getValueAt(indexs[i], 4);        //int col param= Quantity Column
                    model2.addRow(row);
                    
                    //add price of selection to subtotal label
                    double priceAdd = Double.parseDouble((String) jTableCatalogView.getValueAt(indexs[i], 2));
                    
                    subtotal += priceAdd;
            // calculate running totals for labels : subtotal label, tax label, total label
                     
            }          
            tax = subtotal * .0825;
            total = subtotal + tax;
            jLabelSUBTOTALAMOUNT.setText("$ " + String.valueOf(subtotal));
            jLabelTAXAMOUNT.setText("$ " + String.valueOf(tax));
            jLabelTOTALAMOUNT.setText("$ " + String.valueOf(total));
        }
       
    }//GEN-LAST:event_jButtonADDTOCARTActionPerformed

    private void jButtonREMOVEFROMCARTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonREMOVEFROMCARTActionPerformed
        //this method is connected to the 'Remove from Cart' button. It removes selected items 
        //from cart upon pressing the button. 
        //PreCondition : must select an existing row in cart
        
        
        //duplicate model for quantity comparison/////////////////////////////////////////////
        DefaultTableModel model1 = (DefaultTableModel)jTableCatalogView.getModel();
        
        DefaultTableModel model2 = (DefaultTableModel)jTableCart.getModel();
        
        double priceSub = Double.parseDouble((String) jTableCart.getValueAt(jTableCart.getSelectedRow(), 1));
        subtotal -= priceSub;
        tax = tax -(priceSub * .0825);
        total = subtotal + tax;
        model2.removeRow(jTableCart.getSelectedRow());
        //if row selected is last row in cart, default to 0, cart is empty
        if (model2.getRowCount() == 0){
            jLabelSUBTOTALAMOUNT.setText("$0.0");
            jLabelTAXAMOUNT.setText("$0.0");
            jLabelTOTALAMOUNT.setText("$0.0");
        }
        else{
            
            jLabelSUBTOTALAMOUNT.setText(String.valueOf(subtotal));
            jLabelTAXAMOUNT.setText(String.valueOf(tax));
            jLabelTOTALAMOUNT.setText(String.valueOf(total));
            
            //!!!!!! need to figure out how to format this output it 2 decimal places
// doesn't work --> //jLabelSUBTOTALAMOUNT.setText(String.format("%.2f", subtotal));
        }


    }//GEN-LAST:event_jButtonREMOVEFROMCARTActionPerformed

    public int bankAuthorize(String userN, String crednum){
        
        String comp;
        String filePath = "bankList.txt";
        File file = new File(filePath);
        try {
            Scanner myReader = new Scanner(file);
            while (myReader.hasNextLine()) {
                // System.out.println(myReader.nextLine());
                comp = myReader.nextLine();
                String[] row = comp.split(",");
                //row[0] = username
                //row[1] = ccNum
                //System.out.println("row[0] " + row[0] + " and row[1] "+ row[1]);
                if(row[0].equals(userN/*jTextFieldUSERNAME.getText()*/) && row[1].equals(crednum)/*jTextFieldPASSWORD.getText()*/){
                    Random rnd = new Random();
                    IntAuthNum = rnd.nextInt(10000-1000) + 1000;
                    return 1;       //1 is approved 
                }
            }
            myReader.close();
        } catch (FileNotFoundException e) {
            System.out.println("An error occurred.");
            e.printStackTrace();
        }
        return 0;   //else, not authorized
    }
    
    private void jButtonMakeOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonMakeOrderActionPerformed
        //dispose();
//        makeOrder test = new makeOrder();
//        test.setVisible(true);
        if((jRadioButtonSHIPOUT.isSelected() == false) &&(jRadioButtonPICKUP.isSelected() == false)){
            JOptionPane.showMessageDialog(this, "please select a shipping option");
        }
        if((jRadioButtonSHIPOUT.isSelected() == true) && (jRadioButtonPICKUP.isSelected() == true)){
            JOptionPane.showMessageDialog(this,"please select only one shipping option");
        }
        
        if((jRadioButtonSHIPOUT.isSelected() == true) && (jRadioButtonPICKUP.isSelected() == false)){
            double tempTotal = total + 3;
            jLabelTOTALAMOUNT.setText(String.valueOf(tempTotal));
           // System.out.println(jLabelTOTALAMOUNT);

            // saves table values to an order file
            String filePath = "OrderList.txt";
            File file = new File(filePath);

            /////selects everything in table (cart) and writes it to file, sets staus to "unordered" pre-comparing cc number  i.e. authentication from bank file
            jTableCart.selectAll(); //selects all rows
            int indexs[] = jTableCart.getSelectedRows();
            Object[] row = new Object[5];
            try{
                FileWriter fw = new FileWriter(file,true); // add (file, true) instead if you want to append to the file
                BufferedWriter bw = new BufferedWriter(fw);
              //  UserLanding test = new UserLanding();
                test.getUsername();
               // System.out.println(test.username);

               // setEnabled(false);      //pauses clicking anything on dashboard frame
                String compCC;
                compCC = JOptionPane.showInputDialog("Confirm your Credit Card Number");
                if(bankAuthorize(test.username, compCC) == 1){
                    bw.write("\n" + test.username + ","); //find this later from acocunt file db
                    for (int i = 0; i < indexs.length; i++){
                        //bw.write()
                        row[0] = jTableCart.getValueAt(indexs[i], 0);   //prints out the item id (index[i] aka first row, 0th column)
                        row[1] = jTableCart.getValueAt(indexs[i], 2);   //prints out quantity ordered (first row, 2nd column)
                        bw.write(row[1] + " " + (String)row[0] + "-");      //when it comes to collecting the quantity of this for stock file/db, 
                                                                            //parse the second column ONLY by split("-"), BUT THIS WILL HAVE TO 
                                                                            //DONE IN THE STOCK FILE
                    }
                    bw.write("," + IntAuthNum + ",");    //find this later from bank file db
                    bw.write("ordered,");
                    bw.write(compCC+ ",");
                    bw.write(jLabelTOTALAMOUNT.getText());
                    JOptionPane.showMessageDialog(this, "Order is confirmed, thank you!");
                }
                else
                {
                    JOptionPane.showMessageDialog(this, "incorrect number, order unconfirmed");
                   // bw.write(",no AuthNum");
                   // bw.write(",unordered");
                }

                bw.close();
                fw.close();  
               // setEnabled(true);
            }
            catch(IOException ex){
                Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
            } 
        }
        
        if((jRadioButtonSHIPOUT.isSelected() == false) && (jRadioButtonPICKUP.isSelected() == true)){
            jLabelTOTALAMOUNT.setText(String.valueOf(total));
            // saves table values to  an order file
            String filePath = "OrderList.txt";
            File file = new File(filePath);
        
        /////selects everything in table (cart) and writes it to file, sets staus to "unordered" pre-comparing cc number  i.e. authentication from bank file
        jTableCart.selectAll(); //selects all rows
        int indexs[] = jTableCart.getSelectedRows();
        Object[] row = new Object[5];
        try{
            FileWriter fw = new FileWriter(file,true); // add (file, true) instead if you want to append to the file
            BufferedWriter bw = new BufferedWriter(fw);
        //    UserLanding test = new UserLanding();
            test.getUsername();
           // System.out.println(test.username);
           
            
           // setEnabled(false);      //pauses clicking anything on dashboard frame
            String compCC;
            compCC = JOptionPane.showInputDialog("Confirm your Credit Card Number");
            if(bankAuthorize(test.username, compCC) == 1){
                bw.write("\n" + test.username + ","); //find this later from acocunt file db
            
            for (int i = 0; i < indexs.length; i++){
                //bw.write()
                row[0] = jTableCart.getValueAt(indexs[i], 0);   //prints out the item id (index[i] aka first row, 0th column)
                row[1] = jTableCart.getValueAt(indexs[i], 2);   //prints out quantity ordered (first row, 2nd column)
                bw.write(row[1] + " " + (String)row[0] + "-");      //when it comes to collecting the quantity of this for stock file/db, 
                                                                    //parse the second column ONLY by split("-"), BUT THIS WILL HAVE TO 
                                                                    //DONE IN THE STOCK FILE
            }
                bw.write("," + IntAuthNum + ",");    //find this later from bank file db
                bw.write("ordered,");
                bw.write(compCC+ ",");
                bw.write(jLabelTOTALAMOUNT.getText());
                JOptionPane.showMessageDialog(this, "Order is confirmed, thank you!");
            }
            else
            {
                JOptionPane.showMessageDialog(this, "incorrect number, order unconfirmed");
                //bw.write(",no AuthNum");
               // bw.write(" "); //no authorization number given, leave blank
               // bw.write(",unordered");
            }
            
            bw.close();
            fw.close();  
           // setEnabled(true);
           
        }
        catch(IOException ex){
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        } 
        }
        
        
                
    }//GEN-LAST:event_jButtonMakeOrderActionPerformed

    private void jButtonLOGOUTActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonLOGOUTActionPerformed
        dispose();
        //UserLanding test = new UserLanding();
        test.setVisible(true);
        
        
    }//GEN-LAST:event_jButtonLOGOUTActionPerformed

    private void jButtonVIEWORDERSActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVIEWORDERSActionPerformed
        //if you click this button, a new jframe should pop up
        viewOrdersCUSTO view = new viewOrdersCUSTO();
        view.setVisible(true);
        
        String filePath = "OrderList.txt";
        File file = new File(filePath);
                
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            //Scanner read = new Scanner(file);

            DefaultTableModel model = (DefaultTableModel)view.jTableVIEWORDERS.getModel();
            
            Object[] lines = br.lines().toArray();      //creates an Object Array of row strings
            for(int i = 0; i < lines.length; i++){          //begins at one because first line is column names
                String[] row = lines[i].toString().split(",");
                //System.out.println(row[1] +  row[2] +  row[3]);
                //System.out.println(test.username);
                if (row[0].equals(test.username)){ //if username matches the user logged in, add/pull specific row from file to show
                   // row[0] = row[2];
                    row[1] = row[2];
                    row[2] = row[3];
                    model.addRow(row);
                }
                //System.out.println(model.getRowCount());
                //sets column order num to number list based on how many orders show
                for(int x = 0; x < model.getRowCount(); x++){
                    model.setValueAt(x, x, 0);
                }
                
                
                
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonVIEWORDERSActionPerformed

    private void jButtonVIEWINVOICESActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonVIEWINVOICESActionPerformed
        viewInvoiceCUSTO view = new viewInvoiceCUSTO();
        view.setVisible(true);
        
        String filePath = "OrderList.txt";
        File file = new File(filePath);
                
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
            //Scanner read = new Scanner(file);

            DefaultTableModel model = (DefaultTableModel)view.jTableVIEWINVOICES.getModel();
            
            Object[] lines = br.lines().toArray();      //creates an Object Array of row strings
            for(int i = 0; i < lines.length; i++){          //begins at one because first line is column names
                String[] row = lines[i].toString().split(",");
                //System.out.println(row[1] +  row[2] +  row[3]);
                //System.out.println(test.username);
                if (row[0].equals(test.username)){ //if username matches the user logged in, add/pull specific row from file to show
                   // row[0] = row[2];
                    row[1] = row[2];
                    row[2] = row[3];
                    model.addRow(row);
                }
                //System.out.println(model.getRowCount());
                //sets column order num to number list based on how many orders show
                for(int x = 0; x < model.getRowCount(); x++){
                    model.setValueAt(x, x, 0);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButtonVIEWINVOICESActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonADDTOCART;
    private javax.swing.JButton jButtonLOGOUT;
    private javax.swing.JButton jButtonMakeOrder;
    private javax.swing.JButton jButtonREMOVEFROMCART;
    private javax.swing.JButton jButtonVIEWCATALOG;
    private javax.swing.JButton jButtonVIEWINVOICES;
    private javax.swing.JButton jButtonVIEWORDERS;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabelSUBTOTALAMOUNT;
    private javax.swing.JLabel jLabelTAXAMOUNT;
    private javax.swing.JLabel jLabelTOTALAMOUNT;
    private javax.swing.JRadioButton jRadioButtonPICKUP;
    private javax.swing.JRadioButton jRadioButtonSHIPOUT;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTableCart;
    private javax.swing.JTable jTableCatalogView;
    // End of variables declaration//GEN-END:variables
}

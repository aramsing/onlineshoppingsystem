
import java.io.*;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author briao
 */
public class DashBoardSupplier extends javax.swing.JFrame {
    //this is customer dash board, supplier dashboard is in ___filename.java_____
    //set labels to default vals
        double subtotal = 0;
        double tax = 0;
        double total = 0;
        UserLanding test = new UserLanding();
    /**
     * Creates new form DashBoard
     */
    public DashBoardSupplier() {
        initComponents();
        //set default values for labels using local variables
    
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableCatalogView = new javax.swing.JTable();
        jButtonUPDATEINVENTORY = new javax.swing.JButton();
        jButtonREMOVEFROMSUPPLY = new javax.swing.JButton();
        jButtonADDTOSUPPLY = new javax.swing.JButton();
        jDescription = new javax.swing.JTextField();
        jItemID = new javax.swing.JFormattedTextField();
        jRegPrice = new javax.swing.JFormattedTextField();
        jPremiumPrice = new javax.swing.JFormattedTextField();
        jQuantity = new javax.swing.JFormattedTextField();
        jButtonProcessOrder = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableCatalogView.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Item ID", "Description", "Regular Price", "Premium Price", "Quantity"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTableCatalogView.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTableCatalogView);

        jButtonUPDATEINVENTORY.setText("Update");
        jButtonUPDATEINVENTORY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonUPDATEINVENTORYActionPerformed(evt);
            }
        });

        jButtonREMOVEFROMSUPPLY.setText("Remove From Supply");
        jButtonREMOVEFROMSUPPLY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonREMOVEFROMSUPPLYActionPerformed(evt);
            }
        });

        jButtonADDTOSUPPLY.setText("Add to Supply");
        jButtonADDTOSUPPLY.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonADDTOSUPPLYActionPerformed(evt);
            }
        });

        jDescription.setText("Description");

        jItemID.setText("ItemID");

        jRegPrice.setText("Regular Price");

        jPremiumPrice.setText("Premium Price");

        jQuantity.setText("Quantity");

        jButtonProcessOrder.setText("Process Orders");
        jButtonProcessOrder.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButtonProcessOrderActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButtonUPDATEINVENTORY)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonProcessOrder))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 519, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButtonREMOVEFROMSUPPLY, javax.swing.GroupLayout.Alignment.TRAILING))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(86, 86, 86)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jDescription, javax.swing.GroupLayout.DEFAULT_SIZE, 144, Short.MAX_VALUE)
                            .addComponent(jItemID)
                            .addComponent(jRegPrice)
                            .addComponent(jPremiumPrice)
                            .addComponent(jQuantity))
                        .addContainerGap(127, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButtonADDTOSUPPLY)
                        .addGap(92, 92, 92))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButtonUPDATEINVENTORY)
                    .addComponent(jButtonProcessOrder))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButtonREMOVEFROMSUPPLY))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(61, 61, 61)
                        .addComponent(jItemID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jDescription, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jRegPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jPremiumPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jQuantity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(jButtonADDTOSUPPLY)))
                .addContainerGap(33, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    ////SELECT ITEMS
    public void selectItems(){
        //String filePath = 
    }
    private void jButtonUPDATEINVENTORYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonUPDATEINVENTORYActionPerformed

        String filePath = "catalogVals.txt";
        File file = new File(filePath);
        
        try {
            FileReader fr = new FileReader(file);
            BufferedReader br = new BufferedReader(fr);
//            FileWriter fw = new FileWriter(file,true);
//            BufferedWriter bw = new BufferedWriter(fw);
            
            DefaultTableModel model = (DefaultTableModel)jTableCatalogView.getModel();
            
            Object[] lines = br.lines().toArray();      //creates an Object Array of row strings
            for(int i = 1; i < lines.length; i++){          //begins at one because first line is column names
                String[] row = lines[i].toString().split(",");
               // if(jTableCatalogView.getValueAt().equals((Object)row[4])){
//                System.out.println(row[4]);
//                if (row[4].equalsIgnoreCase("0")){
//                    System.out.println("here");
//                    
//                }
//            
//                
                model.addRow(row);
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
//        } catch (IOException ex){
//            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
//        }
        }
    }//GEN-LAST:event_jButtonUPDATEINVENTORYActionPerformed

    
    private void jButtonREMOVEFROMSUPPLYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonREMOVEFROMSUPPLYActionPerformed
        //this method is connected to the 'Add to Cart' button. It adds selected items 
        //to cart upon pressing the button. 
        //PreCondition : must select an existing row in catalog table
        //Displays it in cart table
        //reference vid :
        //  https://www.youtube.com/watch?v=Zt4g6HiFNxo&list=PLFDH5bKmoNqxtOTzA4tjo-Exck6T2v7cG&index=19

        DefaultTableModel model1 = (DefaultTableModel)jTableCatalogView.getModel(); //////////////////////////////////////
        int indexs[] = jTableCatalogView.getSelectedRows();
        
        Object[] row = new Object[5];       //5 because my data file has 5 columns of data for every row read in
        
        
        
        for(int i = 0; i < indexs.length; i++){ 
            System.out.println();
            //variable to compare quantity before adding
            int quantity = Integer.parseInt((String) jTableCatalogView.getValueAt(indexs[i], 4));
            String columnName = (String)jTableCatalogView.getValueAt(indexs[i],0);
            switch(quantity){
///////////////////////////////////////////////////////////////////////////////////////////////
                //////
                //////THE QUANTITY WOULD NEED TO BE MODIFIED FOR THE SUPPLIER AS WELL BUT WE 
                //////WILL COME BACK TO THIS IS WE DECIDE TO USE THE CATALOG AS THE FILE FOR SUPPLIER STOCK 
                //////
///////////////////////////////////////////////////////////////////////////////////////////////
                case 0: //in the case that the value of quantity column in this row is 0
                        //(meaning there is no more of this item), add button will not execute
                    model1.removeRow(indexs[i]);
                    JOptionPane.showMessageDialog(this,columnName + " is out of stock"); //////////////////////this won't be needed if the 
                                                                                                           ////viewcatalog doesn't show that item in first place
                    break;
                default :
                                                       //(int row,int col);    //row represents column, but the naming is confusing  
                    row[0] = jTableCatalogView.getValueAt(indexs[i], 0);        //int col param= ItemID Column
                    row[1] = jTableCatalogView.getValueAt(indexs[i], 1);        //int col param= Description Column
                    row[2] = jTableCatalogView.getValueAt(indexs[i], 2);  // System.out.println("acctypevariable is: " + test.acctype);
                    row[3] = jTableCatalogView.getValueAt(indexs[i], 3);        //int col param= Premium Price Column
                    row[4] = quantity - 1;//jTableCatalogView.getValueAt(indexs[i], 4);        //int col param= Quantity Column
                    
                    
                    //add price of selection to subtotal label
                    double priceAdd = Double.parseDouble((String) jTableCatalogView.getValueAt(indexs[i], 2));
                    
                    subtotal += priceAdd;
            // calculate running totals for labels : subtotal label, tax label, total label
                     
            }          
        }
       
    }//GEN-LAST:event_jButtonREMOVEFROMSUPPLYActionPerformed

    private void jButtonADDTOSUPPLYActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonADDTOSUPPLYActionPerformed
   
        Object[] row = new Object[5];   //5 columns in catalogVals.txt

        String filePath = "CatalogVals.txt";
        File file = new File(filePath);
        try {
            FileWriter fw = new FileWriter("catalogVals.txt");
           // PrintWriter bw = new PrintWriter(fw);
            BufferedWriter bw = new BufferedWriter(fw);
            // Write variable to file
            
            //bw.write()
                        row[0] = jItemID.getText();   //prints out the item id
                        row[1] = jDescription.getText();   //prints out Description ordered
                        row[2] = jRegPrice.getText(); 
                        row[3] = jPremiumPrice.getText(); 
                        row[4] = Integer.parseInt(jQuantity.getText());
                        bw.write(row[4] + " " + row[4] + " " + row[3] + " " + row[2] + " "  + row[1] + " " + row[0]);      
                        //when it comes to collecting the quantity of this for stock file/db, 
                                                                            //parse the second column ONLY by split("-"), BUT THIS WILL HAVE TO 
                                                                            //DONE IN THE STOCK FILE
                    
               // Close 
               bw.close();
               fw.close();


            } 
          catch (IOException ex){

                 Logger.getLogger(DashBoardSupplier.class.getName()).log(Level.SEVERE, null, ex);
                 System.out.println("An error occurred.");
                 ex.printStackTrace();
             }
                        
    }//GEN-LAST:event_jButtonADDTOSUPPLYActionPerformed

    private void jButtonProcessOrderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButtonProcessOrderActionPerformed
        processOrdersSupplier view = new processOrdersSupplier();
        view.setVisible(true);
        
        String filePath = "OrderList.txt";
        File file = new File(filePath);
                
        try {
            FileReader fr = new FileReader(file);
            BufferedReader bw = new BufferedReader(fr);
            //Scanner read = new Scanner(file);

            DefaultTableModel model = (DefaultTableModel)view.jTableVIEWORDERS.getModel();
            
            Object[] lines = bw.lines().toArray();      //creates an Object Array of row strings
            for(int i = 0; i < lines.length; i++){          //begins at one because first line is column names
                String[] row = lines[i].toString().split(",");
                //System.out.println(row[1] +  row[2] +  row[3]);
                //System.out.println(test.username);
                   // row[0] = row[2];
                    row[1] = row[2];
                    row[2] = row[3];
                    model.addRow(row);
                //System.out.println(model.getRowCount());
                //sets column order num to number list based on how many orders show
                for(int x = 0; x < model.getRowCount(); x++){
                    model.setValueAt(x, x, 0);
                }
            }
        } catch (FileNotFoundException ex) {
            Logger.getLogger(DashBoard.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButtonProcessOrderActionPerformed

    public int bankAuthorize(String username, String ccnum){
        
        return 0;
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(DashBoard.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DashBoard().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButtonADDTOSUPPLY;
    private javax.swing.JButton jButtonProcessOrder;
    private javax.swing.JButton jButtonREMOVEFROMSUPPLY;
    private javax.swing.JButton jButtonUPDATEINVENTORY;
    private javax.swing.JTextField jDescription;
    private javax.swing.JFormattedTextField jItemID;
    private javax.swing.JFormattedTextField jPremiumPrice;
    private javax.swing.JFormattedTextField jQuantity;
    private javax.swing.JFormattedTextField jRegPrice;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableCatalogView;
    // End of variables declaration//GEN-END:variables
}
